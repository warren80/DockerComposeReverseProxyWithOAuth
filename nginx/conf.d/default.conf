#upstream www.wvoelkl.com {
#    server www.wvoelkl.com:8081;
#}

# cert: private.yourdomain.com
server {
	server_name www.wvoelkl.com;
	listen 80 ;
	error_log /dev/stdout debug;
        access_log /dev/stdout;
	# return 302 to prevent cacheing
	return 302 https://$host$request_uri;
}

server {
	listen 443 ssl http2;
#	listen 80;
	server_name www.wvoelkl.com;

	ssl_certificate /etc/nginx/ssl/fullchain.pem;
	ssl_certificate_key /etc/nginx/ssl/privkey.pem;

        root /var/www/html/;
        index index.html;

	# Log files for Debug
	#error_log  /var/log/nginx/error.log;
	#access_log /var/log/nginx/access.log;

	error_log /dev/stdout;
	access_log /dev/stdout;

	auth_request /validate;
	# if validate returns `401 not authorized` then forward the request to the error401block
	error_page 401 = @error401;

	location = /validate {
		# vouch can run behind the same nginx-revproxy
		# May need to add "internal", and comply to "upstream" server naming
		proxy_pass http://login.wvoelkl.com;
		proxy_set_header Host $http_host;

		# vouch only acts on the request headers
		proxy_pass_request_body off;
		proxy_set_header Content-Length "";

		# pass X-Vouch-User along with the request
		auth_request_set $auth_resp_x_vouch_user 	$upstream_http_x_vouch_user;

		# these return values are used by the @error401 call
		auth_request_set $auth_resp_jwt 		$upstream_http_x_vouch_jwt;
		auth_request_set $auth_resp_err 		$upstream_http_x_vouch_err;
		auth_request_set $auth_resp_failcount 		$upstream_http_x_vouch_failcount;
	}

	location @error401 {
		# redirect to vouch for login
		return 302 https://login.wvoelkl.com/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
	}
	
	location / {
#	proxy_pass http://www.wvoelkl.com;
		proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;
	}

}

upstream login.wvoelkl.com {
	## Can be connect with "bridge" network
	# vouch-proxy
	server login.wvoelkl.com:9090;
}

server {
	server_name login.wvoelkl.com;
	listen 80 ;
	error_log /dev/stdout debug;
        access_log /dev/stdout;
	# return 302 to prevent cacheing
	return 302 https://$host$request_uri;
}

server {
	server_name login.wvoelkl.com;
	listen 443 ssl http2 ;
        error_log /dev/stdout;
        access_log /dev/stdout;
	ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
	location / {
		proxy_set_header  Host  login.wvoelkl.com;
		proxy_pass http://login.wvoelkl.com;
	}
}
